/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sinchana.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIFETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lifetime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STATION_FIELD_DESC = new org.apache.thrift.protocol.TField("station", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PREDECESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("predecessor", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SUCCESSOR_FIELD_DESC = new org.apache.thrift.protocol.TField("successor", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField START_OF_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("startOfRange", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField END_OF_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("endOfRange", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NEIGHBOUR_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("neighbourSet", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField TO_REMOVE_NODE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("toRemoveNodeSet", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField TARGET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("targetKey", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RETRY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retryCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timeStamp", org.apache.thrift.protocol.TType.I64, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public long id; // optional
  public Node source; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType type; // required
  public int lifetime; // required
  public Node destination; // optional
  public Node station; // optional
  public String message; // optional
  public Node predecessor; // optional
  public Node successor; // optional
  public String startOfRange; // optional
  public String endOfRange; // optional
  public Set<Node> neighbourSet; // optional
  public Set<Node> toRemoveNodeSet; // optional
  public String targetKey; // optional
  public int retryCount; // optional
  public long timeStamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SOURCE((short)2, "source"),
    /**
     * 
     * @see MessageType
     */
    TYPE((short)3, "type"),
    LIFETIME((short)4, "lifetime"),
    DESTINATION((short)5, "destination"),
    STATION((short)6, "station"),
    MESSAGE((short)7, "message"),
    PREDECESSOR((short)8, "predecessor"),
    SUCCESSOR((short)9, "successor"),
    START_OF_RANGE((short)10, "startOfRange"),
    END_OF_RANGE((short)11, "endOfRange"),
    NEIGHBOUR_SET((short)12, "neighbourSet"),
    TO_REMOVE_NODE_SET((short)13, "toRemoveNodeSet"),
    TARGET_KEY((short)14, "targetKey"),
    RETRY_COUNT((short)15, "retryCount"),
    TIME_STAMP((short)16, "timeStamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SOURCE
          return SOURCE;
        case 3: // TYPE
          return TYPE;
        case 4: // LIFETIME
          return LIFETIME;
        case 5: // DESTINATION
          return DESTINATION;
        case 6: // STATION
          return STATION;
        case 7: // MESSAGE
          return MESSAGE;
        case 8: // PREDECESSOR
          return PREDECESSOR;
        case 9: // SUCCESSOR
          return SUCCESSOR;
        case 10: // START_OF_RANGE
          return START_OF_RANGE;
        case 11: // END_OF_RANGE
          return END_OF_RANGE;
        case 12: // NEIGHBOUR_SET
          return NEIGHBOUR_SET;
        case 13: // TO_REMOVE_NODE_SET
          return TO_REMOVE_NODE_SET;
        case 14: // TARGET_KEY
          return TARGET_KEY;
        case 15: // RETRY_COUNT
          return RETRY_COUNT;
        case 16: // TIME_STAMP
          return TIME_STAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LIFETIME_ISSET_ID = 1;
  private static final int __RETRYCOUNT_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  private _Fields optionals[] = {_Fields.ID,_Fields.DESTINATION,_Fields.STATION,_Fields.MESSAGE,_Fields.PREDECESSOR,_Fields.SUCCESSOR,_Fields.START_OF_RANGE,_Fields.END_OF_RANGE,_Fields.NEIGHBOUR_SET,_Fields.TO_REMOVE_NODE_SET,_Fields.TARGET_KEY,_Fields.RETRY_COUNT,_Fields.TIME_STAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.LIFETIME, new org.apache.thrift.meta_data.FieldMetaData("lifetime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.STATION, new org.apache.thrift.meta_data.FieldMetaData("station", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREDECESSOR, new org.apache.thrift.meta_data.FieldMetaData("predecessor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.SUCCESSOR, new org.apache.thrift.meta_data.FieldMetaData("successor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class)));
    tmpMap.put(_Fields.START_OF_RANGE, new org.apache.thrift.meta_data.FieldMetaData("startOfRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_OF_RANGE, new org.apache.thrift.meta_data.FieldMetaData("endOfRange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEIGHBOUR_SET, new org.apache.thrift.meta_data.FieldMetaData("neighbourSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class))));
    tmpMap.put(_Fields.TO_REMOVE_NODE_SET, new org.apache.thrift.meta_data.FieldMetaData("toRemoveNodeSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class))));
    tmpMap.put(_Fields.TARGET_KEY, new org.apache.thrift.meta_data.FieldMetaData("targetKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETRY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retryCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("timeStamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    Node source,
    MessageType type,
    int lifetime)
  {
    this();
    this.source = source;
    this.type = type;
    this.lifetime = lifetime;
    setLifetimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetSource()) {
      this.source = new Node(other.source);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.lifetime = other.lifetime;
    if (other.isSetDestination()) {
      this.destination = new Node(other.destination);
    }
    if (other.isSetStation()) {
      this.station = new Node(other.station);
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetPredecessor()) {
      this.predecessor = new Node(other.predecessor);
    }
    if (other.isSetSuccessor()) {
      this.successor = new Node(other.successor);
    }
    if (other.isSetStartOfRange()) {
      this.startOfRange = other.startOfRange;
    }
    if (other.isSetEndOfRange()) {
      this.endOfRange = other.endOfRange;
    }
    if (other.isSetNeighbourSet()) {
      Set<Node> __this__neighbourSet = new HashSet<Node>();
      for (Node other_element : other.neighbourSet) {
        __this__neighbourSet.add(new Node(other_element));
      }
      this.neighbourSet = __this__neighbourSet;
    }
    if (other.isSetToRemoveNodeSet()) {
      Set<Node> __this__toRemoveNodeSet = new HashSet<Node>();
      for (Node other_element : other.toRemoveNodeSet) {
        __this__toRemoveNodeSet.add(new Node(other_element));
      }
      this.toRemoveNodeSet = __this__toRemoveNodeSet;
    }
    if (other.isSetTargetKey()) {
      this.targetKey = other.targetKey;
    }
    this.retryCount = other.retryCount;
    this.timeStamp = other.timeStamp;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.source = null;
    this.type = null;
    setLifetimeIsSet(false);
    this.lifetime = 0;
    this.destination = null;
    this.station = null;
    this.message = null;
    this.predecessor = null;
    this.successor = null;
    this.startOfRange = null;
    this.endOfRange = null;
    this.neighbourSet = null;
    this.toRemoveNodeSet = null;
    this.targetKey = null;
    setRetryCountIsSet(false);
    this.retryCount = 0;
    setTimeStampIsSet(false);
    this.timeStamp = 0;
  }

  public long getId() {
    return this.id;
  }

  public Message setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public Node getSource() {
    return this.source;
  }

  public Message setSource(Node source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageType
   */
  public Message setType(MessageType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getLifetime() {
    return this.lifetime;
  }

  public Message setLifetime(int lifetime) {
    this.lifetime = lifetime;
    setLifetimeIsSet(true);
    return this;
  }

  public void unsetLifetime() {
    __isset_bit_vector.clear(__LIFETIME_ISSET_ID);
  }

  /** Returns true if field lifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetLifetime() {
    return __isset_bit_vector.get(__LIFETIME_ISSET_ID);
  }

  public void setLifetimeIsSet(boolean value) {
    __isset_bit_vector.set(__LIFETIME_ISSET_ID, value);
  }

  public Node getDestination() {
    return this.destination;
  }

  public Message setDestination(Node destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public Node getStation() {
    return this.station;
  }

  public Message setStation(Node station) {
    this.station = station;
    return this;
  }

  public void unsetStation() {
    this.station = null;
  }

  /** Returns true if field station is set (has been assigned a value) and false otherwise */
  public boolean isSetStation() {
    return this.station != null;
  }

  public void setStationIsSet(boolean value) {
    if (!value) {
      this.station = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public Message setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public Node getPredecessor() {
    return this.predecessor;
  }

  public Message setPredecessor(Node predecessor) {
    this.predecessor = predecessor;
    return this;
  }

  public void unsetPredecessor() {
    this.predecessor = null;
  }

  /** Returns true if field predecessor is set (has been assigned a value) and false otherwise */
  public boolean isSetPredecessor() {
    return this.predecessor != null;
  }

  public void setPredecessorIsSet(boolean value) {
    if (!value) {
      this.predecessor = null;
    }
  }

  public Node getSuccessor() {
    return this.successor;
  }

  public Message setSuccessor(Node successor) {
    this.successor = successor;
    return this;
  }

  public void unsetSuccessor() {
    this.successor = null;
  }

  /** Returns true if field successor is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessor() {
    return this.successor != null;
  }

  public void setSuccessorIsSet(boolean value) {
    if (!value) {
      this.successor = null;
    }
  }

  public String getStartOfRange() {
    return this.startOfRange;
  }

  public Message setStartOfRange(String startOfRange) {
    this.startOfRange = startOfRange;
    return this;
  }

  public void unsetStartOfRange() {
    this.startOfRange = null;
  }

  /** Returns true if field startOfRange is set (has been assigned a value) and false otherwise */
  public boolean isSetStartOfRange() {
    return this.startOfRange != null;
  }

  public void setStartOfRangeIsSet(boolean value) {
    if (!value) {
      this.startOfRange = null;
    }
  }

  public String getEndOfRange() {
    return this.endOfRange;
  }

  public Message setEndOfRange(String endOfRange) {
    this.endOfRange = endOfRange;
    return this;
  }

  public void unsetEndOfRange() {
    this.endOfRange = null;
  }

  /** Returns true if field endOfRange is set (has been assigned a value) and false otherwise */
  public boolean isSetEndOfRange() {
    return this.endOfRange != null;
  }

  public void setEndOfRangeIsSet(boolean value) {
    if (!value) {
      this.endOfRange = null;
    }
  }

  public int getNeighbourSetSize() {
    return (this.neighbourSet == null) ? 0 : this.neighbourSet.size();
  }

  public java.util.Iterator<Node> getNeighbourSetIterator() {
    return (this.neighbourSet == null) ? null : this.neighbourSet.iterator();
  }

  public void addToNeighbourSet(Node elem) {
    if (this.neighbourSet == null) {
      this.neighbourSet = new HashSet<Node>();
    }
    this.neighbourSet.add(elem);
  }

  public Set<Node> getNeighbourSet() {
    return this.neighbourSet;
  }

  public Message setNeighbourSet(Set<Node> neighbourSet) {
    this.neighbourSet = neighbourSet;
    return this;
  }

  public void unsetNeighbourSet() {
    this.neighbourSet = null;
  }

  /** Returns true if field neighbourSet is set (has been assigned a value) and false otherwise */
  public boolean isSetNeighbourSet() {
    return this.neighbourSet != null;
  }

  public void setNeighbourSetIsSet(boolean value) {
    if (!value) {
      this.neighbourSet = null;
    }
  }

  public int getToRemoveNodeSetSize() {
    return (this.toRemoveNodeSet == null) ? 0 : this.toRemoveNodeSet.size();
  }

  public java.util.Iterator<Node> getToRemoveNodeSetIterator() {
    return (this.toRemoveNodeSet == null) ? null : this.toRemoveNodeSet.iterator();
  }

  public void addToToRemoveNodeSet(Node elem) {
    if (this.toRemoveNodeSet == null) {
      this.toRemoveNodeSet = new HashSet<Node>();
    }
    this.toRemoveNodeSet.add(elem);
  }

  public Set<Node> getToRemoveNodeSet() {
    return this.toRemoveNodeSet;
  }

  public Message setToRemoveNodeSet(Set<Node> toRemoveNodeSet) {
    this.toRemoveNodeSet = toRemoveNodeSet;
    return this;
  }

  public void unsetToRemoveNodeSet() {
    this.toRemoveNodeSet = null;
  }

  /** Returns true if field toRemoveNodeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetToRemoveNodeSet() {
    return this.toRemoveNodeSet != null;
  }

  public void setToRemoveNodeSetIsSet(boolean value) {
    if (!value) {
      this.toRemoveNodeSet = null;
    }
  }

  public String getTargetKey() {
    return this.targetKey;
  }

  public Message setTargetKey(String targetKey) {
    this.targetKey = targetKey;
    return this;
  }

  public void unsetTargetKey() {
    this.targetKey = null;
  }

  /** Returns true if field targetKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetKey() {
    return this.targetKey != null;
  }

  public void setTargetKeyIsSet(boolean value) {
    if (!value) {
      this.targetKey = null;
    }
  }

  public int getRetryCount() {
    return this.retryCount;
  }

  public Message setRetryCount(int retryCount) {
    this.retryCount = retryCount;
    setRetryCountIsSet(true);
    return this;
  }

  public void unsetRetryCount() {
    __isset_bit_vector.clear(__RETRYCOUNT_ISSET_ID);
  }

  /** Returns true if field retryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryCount() {
    return __isset_bit_vector.get(__RETRYCOUNT_ISSET_ID);
  }

  public void setRetryCountIsSet(boolean value) {
    __isset_bit_vector.set(__RETRYCOUNT_ISSET_ID, value);
  }

  public long getTimeStamp() {
    return this.timeStamp;
  }

  public Message setTimeStamp(long timeStamp) {
    this.timeStamp = timeStamp;
    setTimeStampIsSet(true);
    return this;
  }

  public void unsetTimeStamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeStamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimeStampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Node)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MessageType)value);
      }
      break;

    case LIFETIME:
      if (value == null) {
        unsetLifetime();
      } else {
        setLifetime((Integer)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((Node)value);
      }
      break;

    case STATION:
      if (value == null) {
        unsetStation();
      } else {
        setStation((Node)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case PREDECESSOR:
      if (value == null) {
        unsetPredecessor();
      } else {
        setPredecessor((Node)value);
      }
      break;

    case SUCCESSOR:
      if (value == null) {
        unsetSuccessor();
      } else {
        setSuccessor((Node)value);
      }
      break;

    case START_OF_RANGE:
      if (value == null) {
        unsetStartOfRange();
      } else {
        setStartOfRange((String)value);
      }
      break;

    case END_OF_RANGE:
      if (value == null) {
        unsetEndOfRange();
      } else {
        setEndOfRange((String)value);
      }
      break;

    case NEIGHBOUR_SET:
      if (value == null) {
        unsetNeighbourSet();
      } else {
        setNeighbourSet((Set<Node>)value);
      }
      break;

    case TO_REMOVE_NODE_SET:
      if (value == null) {
        unsetToRemoveNodeSet();
      } else {
        setToRemoveNodeSet((Set<Node>)value);
      }
      break;

    case TARGET_KEY:
      if (value == null) {
        unsetTargetKey();
      } else {
        setTargetKey((String)value);
      }
      break;

    case RETRY_COUNT:
      if (value == null) {
        unsetRetryCount();
      } else {
        setRetryCount((Integer)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTimeStamp();
      } else {
        setTimeStamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case SOURCE:
      return getSource();

    case TYPE:
      return getType();

    case LIFETIME:
      return Integer.valueOf(getLifetime());

    case DESTINATION:
      return getDestination();

    case STATION:
      return getStation();

    case MESSAGE:
      return getMessage();

    case PREDECESSOR:
      return getPredecessor();

    case SUCCESSOR:
      return getSuccessor();

    case START_OF_RANGE:
      return getStartOfRange();

    case END_OF_RANGE:
      return getEndOfRange();

    case NEIGHBOUR_SET:
      return getNeighbourSet();

    case TO_REMOVE_NODE_SET:
      return getToRemoveNodeSet();

    case TARGET_KEY:
      return getTargetKey();

    case RETRY_COUNT:
      return Integer.valueOf(getRetryCount());

    case TIME_STAMP:
      return Long.valueOf(getTimeStamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SOURCE:
      return isSetSource();
    case TYPE:
      return isSetType();
    case LIFETIME:
      return isSetLifetime();
    case DESTINATION:
      return isSetDestination();
    case STATION:
      return isSetStation();
    case MESSAGE:
      return isSetMessage();
    case PREDECESSOR:
      return isSetPredecessor();
    case SUCCESSOR:
      return isSetSuccessor();
    case START_OF_RANGE:
      return isSetStartOfRange();
    case END_OF_RANGE:
      return isSetEndOfRange();
    case NEIGHBOUR_SET:
      return isSetNeighbourSet();
    case TO_REMOVE_NODE_SET:
      return isSetToRemoveNodeSet();
    case TARGET_KEY:
      return isSetTargetKey();
    case RETRY_COUNT:
      return isSetRetryCount();
    case TIME_STAMP:
      return isSetTimeStamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_lifetime = true;
    boolean that_present_lifetime = true;
    if (this_present_lifetime || that_present_lifetime) {
      if (!(this_present_lifetime && that_present_lifetime))
        return false;
      if (this.lifetime != that.lifetime)
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    boolean this_present_station = true && this.isSetStation();
    boolean that_present_station = true && that.isSetStation();
    if (this_present_station || that_present_station) {
      if (!(this_present_station && that_present_station))
        return false;
      if (!this.station.equals(that.station))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_predecessor = true && this.isSetPredecessor();
    boolean that_present_predecessor = true && that.isSetPredecessor();
    if (this_present_predecessor || that_present_predecessor) {
      if (!(this_present_predecessor && that_present_predecessor))
        return false;
      if (!this.predecessor.equals(that.predecessor))
        return false;
    }

    boolean this_present_successor = true && this.isSetSuccessor();
    boolean that_present_successor = true && that.isSetSuccessor();
    if (this_present_successor || that_present_successor) {
      if (!(this_present_successor && that_present_successor))
        return false;
      if (!this.successor.equals(that.successor))
        return false;
    }

    boolean this_present_startOfRange = true && this.isSetStartOfRange();
    boolean that_present_startOfRange = true && that.isSetStartOfRange();
    if (this_present_startOfRange || that_present_startOfRange) {
      if (!(this_present_startOfRange && that_present_startOfRange))
        return false;
      if (!this.startOfRange.equals(that.startOfRange))
        return false;
    }

    boolean this_present_endOfRange = true && this.isSetEndOfRange();
    boolean that_present_endOfRange = true && that.isSetEndOfRange();
    if (this_present_endOfRange || that_present_endOfRange) {
      if (!(this_present_endOfRange && that_present_endOfRange))
        return false;
      if (!this.endOfRange.equals(that.endOfRange))
        return false;
    }

    boolean this_present_neighbourSet = true && this.isSetNeighbourSet();
    boolean that_present_neighbourSet = true && that.isSetNeighbourSet();
    if (this_present_neighbourSet || that_present_neighbourSet) {
      if (!(this_present_neighbourSet && that_present_neighbourSet))
        return false;
      if (!this.neighbourSet.equals(that.neighbourSet))
        return false;
    }

    boolean this_present_toRemoveNodeSet = true && this.isSetToRemoveNodeSet();
    boolean that_present_toRemoveNodeSet = true && that.isSetToRemoveNodeSet();
    if (this_present_toRemoveNodeSet || that_present_toRemoveNodeSet) {
      if (!(this_present_toRemoveNodeSet && that_present_toRemoveNodeSet))
        return false;
      if (!this.toRemoveNodeSet.equals(that.toRemoveNodeSet))
        return false;
    }

    boolean this_present_targetKey = true && this.isSetTargetKey();
    boolean that_present_targetKey = true && that.isSetTargetKey();
    if (this_present_targetKey || that_present_targetKey) {
      if (!(this_present_targetKey && that_present_targetKey))
        return false;
      if (!this.targetKey.equals(that.targetKey))
        return false;
    }

    boolean this_present_retryCount = true && this.isSetRetryCount();
    boolean that_present_retryCount = true && that.isSetRetryCount();
    if (this_present_retryCount || that_present_retryCount) {
      if (!(this_present_retryCount && that_present_retryCount))
        return false;
      if (this.retryCount != that.retryCount)
        return false;
    }

    boolean this_present_timeStamp = true && this.isSetTimeStamp();
    boolean that_present_timeStamp = true && that.isSetTimeStamp();
    if (this_present_timeStamp || that_present_timeStamp) {
      if (!(this_present_timeStamp && that_present_timeStamp))
        return false;
      if (this.timeStamp != that.timeStamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Message typedOther = (Message)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLifetime()).compareTo(typedOther.isSetLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLifetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lifetime, typedOther.lifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(typedOther.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, typedOther.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStation()).compareTo(typedOther.isSetStation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.station, typedOther.station);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredecessor()).compareTo(typedOther.isSetPredecessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredecessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predecessor, typedOther.predecessor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessor()).compareTo(typedOther.isSetSuccessor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successor, typedOther.successor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartOfRange()).compareTo(typedOther.isSetStartOfRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartOfRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startOfRange, typedOther.startOfRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndOfRange()).compareTo(typedOther.isSetEndOfRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndOfRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endOfRange, typedOther.endOfRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeighbourSet()).compareTo(typedOther.isSetNeighbourSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeighbourSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neighbourSet, typedOther.neighbourSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToRemoveNodeSet()).compareTo(typedOther.isSetToRemoveNodeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToRemoveNodeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toRemoveNodeSet, typedOther.toRemoveNodeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetKey()).compareTo(typedOther.isSetTargetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetKey, typedOther.targetKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryCount()).compareTo(typedOther.isSetRetryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryCount, typedOther.retryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeStamp()).compareTo(typedOther.isSetTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeStamp, typedOther.timeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lifetime:");
    sb.append(this.lifetime);
    first = false;
    if (isSetDestination()) {
      if (!first) sb.append(", ");
      sb.append("destination:");
      if (this.destination == null) {
        sb.append("null");
      } else {
        sb.append(this.destination);
      }
      first = false;
    }
    if (isSetStation()) {
      if (!first) sb.append(", ");
      sb.append("station:");
      if (this.station == null) {
        sb.append("null");
      } else {
        sb.append(this.station);
      }
      first = false;
    }
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetPredecessor()) {
      if (!first) sb.append(", ");
      sb.append("predecessor:");
      if (this.predecessor == null) {
        sb.append("null");
      } else {
        sb.append(this.predecessor);
      }
      first = false;
    }
    if (isSetSuccessor()) {
      if (!first) sb.append(", ");
      sb.append("successor:");
      if (this.successor == null) {
        sb.append("null");
      } else {
        sb.append(this.successor);
      }
      first = false;
    }
    if (isSetStartOfRange()) {
      if (!first) sb.append(", ");
      sb.append("startOfRange:");
      if (this.startOfRange == null) {
        sb.append("null");
      } else {
        sb.append(this.startOfRange);
      }
      first = false;
    }
    if (isSetEndOfRange()) {
      if (!first) sb.append(", ");
      sb.append("endOfRange:");
      if (this.endOfRange == null) {
        sb.append("null");
      } else {
        sb.append(this.endOfRange);
      }
      first = false;
    }
    if (isSetNeighbourSet()) {
      if (!first) sb.append(", ");
      sb.append("neighbourSet:");
      if (this.neighbourSet == null) {
        sb.append("null");
      } else {
        sb.append(this.neighbourSet);
      }
      first = false;
    }
    if (isSetToRemoveNodeSet()) {
      if (!first) sb.append(", ");
      sb.append("toRemoveNodeSet:");
      if (this.toRemoveNodeSet == null) {
        sb.append("null");
      } else {
        sb.append(this.toRemoveNodeSet);
      }
      first = false;
    }
    if (isSetTargetKey()) {
      if (!first) sb.append(", ");
      sb.append("targetKey:");
      if (this.targetKey == null) {
        sb.append("null");
      } else {
        sb.append(this.targetKey);
      }
      first = false;
    }
    if (isSetRetryCount()) {
      if (!first) sb.append(", ");
      sb.append("retryCount:");
      sb.append(this.retryCount);
      first = false;
    }
    if (isSetTimeStamp()) {
      if (!first) sb.append(", ");
      sb.append("timeStamp:");
      sb.append(this.timeStamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (source == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'source' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'lifetime' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.source = new Node();
              struct.source.read(iprot);
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIFETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lifetime = iprot.readI32();
              struct.setLifetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.destination = new Node();
              struct.destination.read(iprot);
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.station = new Node();
              struct.station.read(iprot);
              struct.setStationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PREDECESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.predecessor = new Node();
              struct.predecessor.read(iprot);
              struct.setPredecessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUCCESSOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.successor = new Node();
              struct.successor.read(iprot);
              struct.setSuccessorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_OF_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startOfRange = iprot.readString();
              struct.setStartOfRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_OF_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endOfRange = iprot.readString();
              struct.setEndOfRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEIGHBOUR_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.neighbourSet = new HashSet<Node>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  Node _elem2; // required
                  _elem2 = new Node();
                  _elem2.read(iprot);
                  struct.neighbourSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setNeighbourSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TO_REMOVE_NODE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.toRemoveNodeSet = new HashSet<Node>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  Node _elem5; // required
                  _elem5 = new Node();
                  _elem5.read(iprot);
                  struct.toRemoveNodeSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setToRemoveNodeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TARGET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetKey = iprot.readString();
              struct.setTargetKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RETRY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryCount = iprot.readI32();
              struct.setRetryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeStamp = iprot.readI64();
              struct.setTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLifetime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lifetime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        struct.source.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIFETIME_FIELD_DESC);
      oprot.writeI32(struct.lifetime);
      oprot.writeFieldEnd();
      if (struct.destination != null) {
        if (struct.isSetDestination()) {
          oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
          struct.destination.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.station != null) {
        if (struct.isSetStation()) {
          oprot.writeFieldBegin(STATION_FIELD_DESC);
          struct.station.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.predecessor != null) {
        if (struct.isSetPredecessor()) {
          oprot.writeFieldBegin(PREDECESSOR_FIELD_DESC);
          struct.predecessor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.successor != null) {
        if (struct.isSetSuccessor()) {
          oprot.writeFieldBegin(SUCCESSOR_FIELD_DESC);
          struct.successor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startOfRange != null) {
        if (struct.isSetStartOfRange()) {
          oprot.writeFieldBegin(START_OF_RANGE_FIELD_DESC);
          oprot.writeString(struct.startOfRange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endOfRange != null) {
        if (struct.isSetEndOfRange()) {
          oprot.writeFieldBegin(END_OF_RANGE_FIELD_DESC);
          oprot.writeString(struct.endOfRange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.neighbourSet != null) {
        if (struct.isSetNeighbourSet()) {
          oprot.writeFieldBegin(NEIGHBOUR_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.neighbourSet.size()));
            for (Node _iter6 : struct.neighbourSet)
            {
              _iter6.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.toRemoveNodeSet != null) {
        if (struct.isSetToRemoveNodeSet()) {
          oprot.writeFieldBegin(TO_REMOVE_NODE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.toRemoveNodeSet.size()));
            for (Node _iter7 : struct.toRemoveNodeSet)
            {
              _iter7.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetKey != null) {
        if (struct.isSetTargetKey()) {
          oprot.writeFieldBegin(TARGET_KEY_FIELD_DESC);
          oprot.writeString(struct.targetKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRetryCount()) {
        oprot.writeFieldBegin(RETRY_COUNT_FIELD_DESC);
        oprot.writeI32(struct.retryCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeStamp()) {
        oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
        oprot.writeI64(struct.timeStamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.source.write(oprot);
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.lifetime);
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDestination()) {
        optionals.set(1);
      }
      if (struct.isSetStation()) {
        optionals.set(2);
      }
      if (struct.isSetMessage()) {
        optionals.set(3);
      }
      if (struct.isSetPredecessor()) {
        optionals.set(4);
      }
      if (struct.isSetSuccessor()) {
        optionals.set(5);
      }
      if (struct.isSetStartOfRange()) {
        optionals.set(6);
      }
      if (struct.isSetEndOfRange()) {
        optionals.set(7);
      }
      if (struct.isSetNeighbourSet()) {
        optionals.set(8);
      }
      if (struct.isSetToRemoveNodeSet()) {
        optionals.set(9);
      }
      if (struct.isSetTargetKey()) {
        optionals.set(10);
      }
      if (struct.isSetRetryCount()) {
        optionals.set(11);
      }
      if (struct.isSetTimeStamp()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetDestination()) {
        struct.destination.write(oprot);
      }
      if (struct.isSetStation()) {
        struct.station.write(oprot);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetPredecessor()) {
        struct.predecessor.write(oprot);
      }
      if (struct.isSetSuccessor()) {
        struct.successor.write(oprot);
      }
      if (struct.isSetStartOfRange()) {
        oprot.writeString(struct.startOfRange);
      }
      if (struct.isSetEndOfRange()) {
        oprot.writeString(struct.endOfRange);
      }
      if (struct.isSetNeighbourSet()) {
        {
          oprot.writeI32(struct.neighbourSet.size());
          for (Node _iter8 : struct.neighbourSet)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetToRemoveNodeSet()) {
        {
          oprot.writeI32(struct.toRemoveNodeSet.size());
          for (Node _iter9 : struct.toRemoveNodeSet)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetTargetKey()) {
        oprot.writeString(struct.targetKey);
      }
      if (struct.isSetRetryCount()) {
        oprot.writeI32(struct.retryCount);
      }
      if (struct.isSetTimeStamp()) {
        oprot.writeI64(struct.timeStamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.source = new Node();
      struct.source.read(iprot);
      struct.setSourceIsSet(true);
      struct.type = MessageType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.lifetime = iprot.readI32();
      struct.setLifetimeIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.destination = new Node();
        struct.destination.read(iprot);
        struct.setDestinationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.station = new Node();
        struct.station.read(iprot);
        struct.setStationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.predecessor = new Node();
        struct.predecessor.read(iprot);
        struct.setPredecessorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.successor = new Node();
        struct.successor.read(iprot);
        struct.setSuccessorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startOfRange = iprot.readString();
        struct.setStartOfRangeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.endOfRange = iprot.readString();
        struct.setEndOfRangeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.neighbourSet = new HashSet<Node>(2*_set10.size);
          for (int _i11 = 0; _i11 < _set10.size; ++_i11)
          {
            Node _elem12; // required
            _elem12 = new Node();
            _elem12.read(iprot);
            struct.neighbourSet.add(_elem12);
          }
        }
        struct.setNeighbourSetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.toRemoveNodeSet = new HashSet<Node>(2*_set13.size);
          for (int _i14 = 0; _i14 < _set13.size; ++_i14)
          {
            Node _elem15; // required
            _elem15 = new Node();
            _elem15.read(iprot);
            struct.toRemoveNodeSet.add(_elem15);
          }
        }
        struct.setToRemoveNodeSetIsSet(true);
      }
      if (incoming.get(10)) {
        struct.targetKey = iprot.readString();
        struct.setTargetKeyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.retryCount = iprot.readI32();
        struct.setRetryCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.timeStamp = iprot.readI64();
        struct.setTimeStampIsSet(true);
      }
    }
  }

}

