/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sinchana.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServiceObject implements org.apache.thrift.TBase<ServiceObject, ServiceObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceObject");

  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceObjectTupleSchemeFactory());
  }

  public String sourceID; // required
  public String sourceAddress; // required
  public String serviceName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_ID((short)1, "sourceID"),
    SOURCE_ADDRESS((short)2, "sourceAddress"),
    SERVICE_NAME((short)3, "serviceName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_ID
          return SOURCE_ID;
        case 2: // SOURCE_ADDRESS
          return SOURCE_ADDRESS;
        case 3: // SERVICE_NAME
          return SERVICE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("sourceAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceObject.class, metaDataMap);
  }

  public ServiceObject() {
  }

  public ServiceObject(
    String sourceID,
    String sourceAddress,
    String serviceName)
  {
    this();
    this.sourceID = sourceID;
    this.sourceAddress = sourceAddress;
    this.serviceName = serviceName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceObject(ServiceObject other) {
    if (other.isSetSourceID()) {
      this.sourceID = other.sourceID;
    }
    if (other.isSetSourceAddress()) {
      this.sourceAddress = other.sourceAddress;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
  }

  public ServiceObject deepCopy() {
    return new ServiceObject(this);
  }

  @Override
  public void clear() {
    this.sourceID = null;
    this.sourceAddress = null;
    this.serviceName = null;
  }

  public String getSourceID() {
    return this.sourceID;
  }

  public ServiceObject setSourceID(String sourceID) {
    this.sourceID = sourceID;
    return this;
  }

  public void unsetSourceID() {
    this.sourceID = null;
  }

  /** Returns true if field sourceID is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceID() {
    return this.sourceID != null;
  }

  public void setSourceIDIsSet(boolean value) {
    if (!value) {
      this.sourceID = null;
    }
  }

  public String getSourceAddress() {
    return this.sourceAddress;
  }

  public ServiceObject setSourceAddress(String sourceAddress) {
    this.sourceAddress = sourceAddress;
    return this;
  }

  public void unsetSourceAddress() {
    this.sourceAddress = null;
  }

  /** Returns true if field sourceAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceAddress() {
    return this.sourceAddress != null;
  }

  public void setSourceAddressIsSet(boolean value) {
    if (!value) {
      this.sourceAddress = null;
    }
  }

  public String getServiceName() {
    return this.serviceName;
  }

  public ServiceObject setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_ID:
      if (value == null) {
        unsetSourceID();
      } else {
        setSourceID((String)value);
      }
      break;

    case SOURCE_ADDRESS:
      if (value == null) {
        unsetSourceAddress();
      } else {
        setSourceAddress((String)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_ID:
      return getSourceID();

    case SOURCE_ADDRESS:
      return getSourceAddress();

    case SERVICE_NAME:
      return getServiceName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_ID:
      return isSetSourceID();
    case SOURCE_ADDRESS:
      return isSetSourceAddress();
    case SERVICE_NAME:
      return isSetServiceName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceObject)
      return this.equals((ServiceObject)that);
    return false;
  }

  public boolean equals(ServiceObject that) {
    if (that == null)
      return false;

    boolean this_present_sourceID = true && this.isSetSourceID();
    boolean that_present_sourceID = true && that.isSetSourceID();
    if (this_present_sourceID || that_present_sourceID) {
      if (!(this_present_sourceID && that_present_sourceID))
        return false;
      if (!this.sourceID.equals(that.sourceID))
        return false;
    }

    boolean this_present_sourceAddress = true && this.isSetSourceAddress();
    boolean that_present_sourceAddress = true && that.isSetSourceAddress();
    if (this_present_sourceAddress || that_present_sourceAddress) {
      if (!(this_present_sourceAddress && that_present_sourceAddress))
        return false;
      if (!this.sourceAddress.equals(that.sourceAddress))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServiceObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServiceObject typedOther = (ServiceObject)other;

    lastComparison = Boolean.valueOf(isSetSourceID()).compareTo(typedOther.isSetSourceID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceID, typedOther.sourceID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceAddress()).compareTo(typedOther.isSetSourceAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceAddress, typedOther.sourceAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceObject(");
    boolean first = true;

    sb.append("sourceID:");
    if (this.sourceID == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceAddress:");
    if (this.sourceAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceObjectStandardSchemeFactory implements SchemeFactory {
    public ServiceObjectStandardScheme getScheme() {
      return new ServiceObjectStandardScheme();
    }
  }

  private static class ServiceObjectStandardScheme extends StandardScheme<ServiceObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceID = iprot.readString();
              struct.setSourceIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceAddress = iprot.readString();
              struct.setSourceAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceID != null) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.sourceID);
        oprot.writeFieldEnd();
      }
      if (struct.sourceAddress != null) {
        oprot.writeFieldBegin(SOURCE_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.sourceAddress);
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceObjectTupleSchemeFactory implements SchemeFactory {
    public ServiceObjectTupleScheme getScheme() {
      return new ServiceObjectTupleScheme();
    }
  }

  private static class ServiceObjectTupleScheme extends TupleScheme<ServiceObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSourceID()) {
        optionals.set(0);
      }
      if (struct.isSetSourceAddress()) {
        optionals.set(1);
      }
      if (struct.isSetServiceName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSourceID()) {
        oprot.writeString(struct.sourceID);
      }
      if (struct.isSetSourceAddress()) {
        oprot.writeString(struct.sourceAddress);
      }
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.serviceName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sourceID = iprot.readString();
        struct.setSourceIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceAddress = iprot.readString();
        struct.setSourceAddressIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
    }
  }

}

